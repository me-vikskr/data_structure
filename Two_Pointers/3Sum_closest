Problem Statement:
Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.

Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

Example 2:
Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).

Approach:
1. sort the array to get negative one side and positive other side
2. take int ans to store ans
3. loop over the sorted array i=0 to i=n-1
4. for each element of array take 2 pointers -> j=i+1 and k=n-1
5. calculate sum for i, j, k and check conditions:
  1. Condn for storing sum:
      if(currSum is more close to target) update the ans
  2. Condn for 2 pointer movement
      if(sum>target) reduce sum -> i.e. take the positive element pointer towards negative
      else increase sum -> take the negative element pointer towards positive
6. return ans;

Solution (C++):
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n=nums.size();
        sort(nums.begin(), nums.end());

        int ans = nums[0]+nums[1]+nums[2];
        for(int i=0; i<n; i++){
            //2-pointers
            int j=i+1, k=n-1; 
            while(j<k){
                int sum = nums[i] + nums[j] + nums[k];
                
                if(abs(target-sum) < abs(target-ans)) ans = sum;

                if(sum < target) j++;
                else k--;
            }
        }

        return ans;
    }
};
