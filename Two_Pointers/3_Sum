#3_Sum

Problem Statement:
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


Approach:
1. Sort the array to put all negative one side and all positive other side
2. take loop i=0 to n-1;
3. for each i:
    take two pointer j=i+1 and k=n-1->last element
    check if their sum is required sum or not

  while(j<k)
    if(sum==reqSum) take the three numbers
    else if(sum>reqSum) -> that means we need to get smaller positive number to take smaller element from the array, k--
    else if(sum<reqSum) -> that means we are taking too negative -> take less negative of a number -> j++;
4. keep all the ans in set to avoid getting multiple same trio
5. then from set to arr 

Solution:
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());

        set<vector<int>> st;
        vector<vector<int>> ans;

        for(int i=0; i<n; i++){
            if(nums[i]>0) break;

            int j=i+1, k = n-1;
            int target = (-1)*nums[i];
            while(j<k){
                int sum = nums[j] + nums[k];
                if(sum==target){
                    st.insert({nums[i], nums[j], nums[k]});
                    j++, k--;
                }
                else if(sum>target){
                    k--;
                }
                else j++;
            }
        }

        for(auto it: st) ans.push_back(it);

        return ans;
    }
};
